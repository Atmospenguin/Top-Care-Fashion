generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id                 Int                    @id @default(autoincrement())
  username           String                 @unique @db.VarChar(64)
  email              String                 @unique @db.VarChar(191)
  password_hash      String?                @db.VarChar(191)
  dob                DateTime?              @db.Date
  gender             Gender?
  role               UserRole               @default(USER)
  status             UserStatus             @default(ACTIVE)
  is_premium         Boolean                @default(false)
  premium_until      DateTime?              @db.Timestamptz(6)
  average_rating     Decimal?               @db.Decimal(3, 2)
  total_reviews      Int                    @default(0)
  created_at         DateTime               @default(now()) @db.Timestamptz(6)
  supabase_user_id   String?                @unique @db.Uuid
  avatar_url         String?
  phone_number       String?                @db.VarChar(20)
  bio                String?
  location           String?                @db.VarChar(100)
  updated_at         DateTime?              @default(now()) @db.Timestamp(6)
  cart_items         cart_items[]
  faqs               faq[]
  feedbacks          feedback[]
  listings_as_seller listings[]             @relation("UserListings")
  orders             orders[]
  reviews_received   reviews[]              @relation("Reviewee")
  reviews_written    reviews[]              @relation("Reviewer")
  transactions_buy   transactions[]         @relation("Buyer")
  transactions_sell  transactions[]         @relation("Seller")
  addresses          user_addresses[]
  payment_methods    user_payment_methods[]
  // Follow关系
  followers          user_follows[]         @relation("UserFollowing")
  following          user_follows[]         @relation("UserFollowers")

  @@map("users")
}

model listing_categories {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  description String?    @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamptz(6)
  is_public   Boolean?   @default(true)
  listings    listings[]

  @@map("listing_categories")
}

model listings {
  id              Int                 @id @default(autoincrement())
  name            String              @db.VarChar(120)
  description     String?
  category_id     Int?
  seller_id       Int?
  listed          Boolean             @default(true)
  sold            Boolean             @default(false)
  price           Decimal             @db.Decimal(10, 2)
  image_url       String?
  image_urls      Json?               @db.Json
  brand           String?             @db.VarChar(100)
  size            String?             @db.VarChar(50)
  condition_type  ConditionType       @default(GOOD)
  gender          String?             @db.VarChar(10) @default("unisex")
  tags            Json?               @db.Json
  created_at      DateTime            @default(now()) @db.Timestamptz(6)
  sold_at         DateTime?           @db.Timestamptz(6)
  original_price  Decimal?            @db.Decimal(10, 2)
  material        String?             @db.VarChar(100)
  weight          Decimal?            @db.Decimal(8, 2)
  dimensions      String?             @db.VarChar(50)
  sku             String?             @db.VarChar(50)
  inventory_count Int?                @default(0)
  views_count     Int?                @default(0)
  likes_count     Int?                @default(0)
  updated_at      DateTime?           @default(now()) @db.Timestamp(6)
  cart_items      cart_items[]
  category        listing_categories? @relation(fields: [category_id], references: [id])
  seller          users?              @relation("UserListings", fields: [seller_id], references: [id])
  order_items     order_items[]
  transactions    transactions?

  @@index([category_id])
  @@index([seller_id])
  @@map("listings")
}

model user_addresses {
  id          Int       @id @default(autoincrement())
  user_id     Int?
  type        String?   @default("home") @db.VarChar(20)
  name        String    @db.VarChar(100)
  phone       String    @db.VarChar(20)
  line1       String    @db.VarChar(200)
  line2       String?   @db.VarChar(200)
  city        String    @db.VarChar(100)
  state       String    @db.VarChar(100)
  postal_code String    @db.VarChar(20)
  country     String    @db.VarChar(100)
  is_default  Boolean?  @default(false)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  user        users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_addresses")
}

model user_payment_methods {
  id           Int       @id @default(autoincrement())
  user_id      Int?
  type         String    @db.VarChar(50)
  label        String    @db.VarChar(100)
  brand        String?   @db.VarChar(50)
  last4        String?   @db.VarChar(4)
  expiry_month Int?
  expiry_year  Int?
  is_default   Boolean?  @default(false)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  user         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_payment_methods")
}

model cart_items {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  listing_id Int?
  quantity   Int       @default(1)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  listing    listings? @relation(fields: [listing_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, listing_id])
  @@map("cart_items")
}

model orders {
  id              Int           @id @default(autoincrement())
  user_id         Int?
  order_number    String        @unique @db.VarChar(50)
  status          String?       @default("pending") @db.VarChar(50)
  total_amount    Decimal       @db.Decimal(10, 2)
  shipping_method String?       @db.VarChar(100)
  notes           String?
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  updated_at      DateTime?     @default(now()) @db.Timestamp(6)
  order_items     order_items[]
  users           users?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("orders")
}

model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int?
  listing_id Int?
  quantity   Int
  price      Decimal   @db.Decimal(10, 2)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  listing    listings? @relation(fields: [listing_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  order      orders?   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("order_items")
}

model transactions {
  id         Int       @id @default(autoincrement())
  buyer_id   Int
  seller_id  Int
  listing_id Int       @unique
  quantity   Int       @default(1)
  price_each Decimal   @db.Decimal(10, 2)
  status     TxStatus  @default(PENDING)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  reviews    reviews[]
  buyer      users     @relation("Buyer", fields: [buyer_id], references: [id])
  listing    listings  @relation(fields: [listing_id], references: [id])
  seller     users     @relation("Seller", fields: [seller_id], references: [id])

  @@index([buyer_id])
  @@index([seller_id])
  @@index([listing_id])
  @@map("transactions")
}

model reviews {
  id             Int          @id @default(autoincrement())
  transaction_id Int
  reviewer_id    Int
  reviewee_id    Int
  rating         Int
  comment        String
  reviewer_type  ReviewerType
  created_at     DateTime     @default(now()) @db.Timestamptz(6)
  reviewee       users        @relation("Reviewee", fields: [reviewee_id], references: [id], onDelete: Cascade)
  reviewer       users        @relation("Reviewer", fields: [reviewer_id], references: [id], onDelete: Cascade)
  transaction    transactions @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@unique([transaction_id, reviewer_id], name: "unique_transaction_reviewer")
  @@unique([transaction_id, reviewer_type], name: "unique_transaction_reviewer_type")
  @@index([reviewer_id])
  @@index([reviewee_id])
  @@map("reviews")
}

model feedback {
  id         Int      @id @default(autoincrement())
  user_id    Int?
  user_email String?  @db.VarChar(191)
  user_name  String?  @db.VarChar(100)
  message    String
  rating     Int?
  tags       Json?    @db.Json
  featured   Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  is_public  Boolean? @default(true)
  user       users?   @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@map("feedback")
}

model faq {
  id          Int       @id @default(autoincrement())
  user_id     Int?
  user_email  String?   @db.VarChar(191)
  question    String
  answer      String?
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  answered_at DateTime? @db.Timestamptz(6)
  is_public   Boolean?  @default(true)
  user        users?    @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@map("faq")
}

model landing_content {
  id                   Int      @id @default(1) @db.SmallInt
  hero_title           String   @db.VarChar(200)
  hero_subtitle        String   @db.VarChar(300)
  updated_at           DateTime @default(now()) @db.Timestamptz(6)
  hero_carousel_images Json?
  mixmatch_title       String?  @db.VarChar(100)
  mixmatch_desc        String?  @db.VarChar(300)
  ailisting_title      String?  @db.VarChar(100)
  ailisting_desc       String?  @db.VarChar(300)
  ailisting_images     Json?
  search_title         String?  @db.VarChar(100)
  search_desc          String?  @db.VarChar(300)
  search_images        Json?
  mixmatch_images      Json?

  @@map("landing_content")
}

model site_stats {
  id             Int      @id @default(1) @db.SmallInt
  total_users    Int      @default(0)
  total_listings Int      @default(0)
  total_sold     Int      @default(0)
  avg_rating     Decimal  @default(4.8) @db.Decimal(2, 1)
  updated_at     DateTime @default(now()) @db.Timestamptz(6)

  @@map("site_stats")
}

model pricing_plans {
  id                     Int      @id @default(autoincrement())
  plan_type              PlanType
  name                   String   @db.VarChar(50)
  description            String?  @db.VarChar(100)
  price_monthly          Decimal  @default(0) @db.Decimal(6, 2)
  price_quarterly        Decimal? @db.Decimal(6, 2)
  price_annual           Decimal? @db.Decimal(6, 2)
  listing_limit          Int?
  promotion_price        Decimal  @db.Decimal(6, 2)
  promotion_discount     Decimal? @db.Decimal(5, 2)
  commission_rate        Decimal  @db.Decimal(5, 2)
  mixmatch_limit         Int?
  free_promotion_credits Int?
  seller_badge           String?  @db.VarChar(100)
  features               Json?    @db.Json
  is_popular             Boolean  @default(false)
  active                 Boolean  @default(true)
  created_at             DateTime @default(now()) @db.Timestamptz(6)

  @@map("pricing_plans")
}

model reports {
  id          Int              @id @default(autoincrement())
  target_type ReportTargetType
  target_id   String           @db.VarChar(64)
  reporter    String           @db.VarChar(191)
  reason      String
  status      ReportStatus     @default(OPEN)
  notes       String?
  created_at  DateTime         @default(now()) @db.Timestamptz(6)
  resolved_at DateTime?        @db.Timestamptz(6)

  @@map("reports")
}

model homepage_content {
  id      Int  @id @default(1) @db.SmallInt
  content Json @default("{}")
}

/// =========== ENUMS (每个值一行) ===========
enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum ConditionType {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  POOR
}

enum TxStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

enum ReviewerType {
  BUYER
  SELLER
}

enum PlanType {
  FREE
  PREMIUM
}

enum ReportTargetType {
  LISTING
  USER
}

enum ReportStatus {
  OPEN
  RESOLVED
  DISMISSED
}

model user_follows {
  id           Int      @id @default(autoincrement())
  follower_id  Int
  following_id Int
  created_at   DateTime @default(now()) @db.Timestamptz(6)

  follower  users @relation("UserFollowers", fields: [follower_id], references: [id], onDelete: Cascade)
  following users @relation("UserFollowing", fields: [following_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, following_id])
  @@map("user_follows")
}