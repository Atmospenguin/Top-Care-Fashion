import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/db";
import { getSessionUser } from "@/lib/auth";

/**
 * Ëé∑ÂèñÂΩìÂâçÁôªÂΩïÁî®Êà∑
 */
// Áªü‰∏ÄÈâ¥ÊùÉÔºö‰ΩøÁî® getSessionUser(req)

/**
 * Ëé∑ÂèñÂΩìÂâçÁî®Êà∑listings‰∏≠ÂÆûÈôÖ‰ΩøÁî®ÁöÑÂàÜÁ±ª
 */
export async function GET(req: NextRequest) {
  try {
    const sessionUser = await getSessionUser(req);
    const user = sessionUser ? sessionUser : null;
    if (!user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    console.log("üìñ Loading categories for user:", user.id);

    // Ëé∑ÂèñÁî®Êà∑listings‰∏≠ÂÆûÈôÖ‰ΩøÁî®ÁöÑÂàÜÁ±ªÔºàÂè™ËÆ°ÁÆóactive listingsÔºâ
    const categories = await prisma.listing_categories.findMany({
      where: {
        listings: {
          some: {
            seller_id: user.id,
            listed: true,
            sold: false,
          },
        },
      },
      select: {
        id: true,
        name: true,
        description: true,
        _count: {
          select: {
            listings: {
              where: {
                seller_id: user.id,
                listed: true,
                sold: false,
              },
            },
          },
        },
      },
      orderBy: {
        name: "asc",
      },
    });

    // Ê†ºÂºèÂåñÂàÜÁ±ªÊï∞ÊçÆ
    const formattedCategories = categories.map((category) => ({
      id: category.id,
      name: category.name,
      description: category.description,
      count: category._count.listings,
    }));

    console.log(`‚úÖ Found ${formattedCategories.length} categories for user ${user.id}`);

    return NextResponse.json({
      success: true,
      categories: formattedCategories,
    });

  } catch (error) {
    console.error("‚ùå Error fetching user categories:", error);
    return NextResponse.json(
      { error: "Failed to fetch categories" },
      { status: 500 }
    );
  }
}
